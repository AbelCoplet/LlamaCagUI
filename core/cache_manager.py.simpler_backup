#!/usr/bin/env python3
"""
Ultra minimal KV cache management for LlamaCag UI
A simplified version that avoids any recursion risk
"""
import os
import sys
import json
import time
from pathlib import Path
from typing import Dict, List, Optional
from PyQt5.QtCore import QObject, pyqtSignal

class CacheManager(QObject):
    """Minimal manager for KV caches with no directory traversal"""
    # Signals
    cache_list_updated = pyqtSignal()
    cache_purged = pyqtSignal(str, bool)  # cache_path, success

    def __init__(self, config):
        """Initialize cache manager"""
        super().__init__()
        self.config = config
        
        # Use a simple string path to avoid any Path object issues
        cache_dir = config.get('LLAMACPP_KV_CACHE_DIR', '')
        if not cache_dir:
            cache_dir = os.path.join(os.path.expanduser('~'), 'cag_project', 'kv_caches')
        self.kv_cache_dir = os.path.expanduser(cache_dir)
        
        # Create directory if it doesn't exist
        if not os.path.exists(self.kv_cache_dir):
            os.makedirs(self.kv_cache_dir, exist_ok=True)
        
        # Registry paths
        self.registry_path = os.path.join(self.kv_cache_dir, 'cache_registry.json')
        self.usage_path = os.path.join(self.kv_cache_dir, 'usage_registry.json')
        
        # Create empty registry files if they don't exist
        if not os.path.exists(self.registry_path):
            with open(self.registry_path, 'w') as f:
                f.write("{}")
        if not os.path.exists(self.usage_path):
            with open(self.usage_path, 'w') as f:
                f.write("{}")
        
        # Load registries
        self._cache_registry = self._load_json(self.registry_path, {})
        self._usage_registry = self._load_json(self.usage_path, {})
    
    def _load_json(self, path, default=None):
        """Safe JSON loading with fallback"""
        try:
            with open(path, 'r') as f:
                return json.load(f)
        except Exception as e:
            print(f"Failed to load {path}: {e}")
            return default if default is not None else {}
    
    def _save_json(self, path, data):
        """Safe JSON saving"""
        try:
            with open(path, 'w') as f:
                json.dump(data, f, indent=2)
            return True
        except Exception as e:
            print(f"Failed to save {path}: {e}")
            return False
    
    def refresh_cache_list(self):
        """Update registry by checking files - NO DIRECTORY SCANNING"""
        print("Checking registry entries (NO DIRECTORY SCANNING)")
        
        # Remove entries for non-existent files
        for path in list(self._cache_registry.keys()):
            if not os.path.exists(path):
                del self._cache_registry[path]
                if path in self._usage_registry:
                    del self._usage_registry[path]
        
        # Save updated registry
        self._save_json(self.registry_path, self._cache_registry)
        self._save_json(self.usage_path, self._usage_registry)
        
        # Notify UI
        self.cache_list_updated.emit()
    
    def get_cache_list(self) -> List[Dict]:
        """Get list of available KV caches"""
        result = []
        
        for path, info in self._cache_registry.items():
            # Skip non-existent files
            if not os.path.exists(path):
                continue
            
            try:
                # Get basic file stats
                stat = os.stat(path)
                filename = os.path.basename(path)
                
                # Get usage info
                usage = self._usage_registry.get(path, {})
                
                # Create cache info
                cache_info = {
                    'id': info.get('document_id', filename),
                    'path': path,
                    'filename': filename,
                    'size': stat.st_size,
                    'last_modified': stat.st_mtime,
                    'document_id': info.get('document_id', os.path.splitext(filename)[0]),
                    'original_file_path': info.get('original_file_path', ''),
                    'context_size': info.get('context_size', 0),
                    'token_count': info.get('token_count', 0),
                    'model_id': info.get('model_id', ''),
                    'created_at': info.get('created_at', None),
                    'last_used': usage.get('last_used', None),
                    'usage_count': usage.get('usage_count', 0),
                    'is_master': info.get('is_master', False)
                }
                
                result.append(cache_info)
            except Exception as e:
                print(f"Error getting info for {path}: {e}")
        
        # Sort by last used time
        result.sort(key=lambda x: x.get('last_used') or x.get('created_at') or 0, reverse=True)
        return result
    
    def get_cache_info(self, cache_path: str) -> Optional[Dict]:
        """Get detailed information about a KV cache"""
        if not cache_path or not os.path.exists(cache_path):
            return None
        
        if cache_path not in self._cache_registry:
            return None
        
        try:
            # Get basic file stats
            stat = os.stat(cache_path)
            filename = os.path.basename(cache_path)
            
            # Get registry info
            info = self._cache_registry.get(cache_path, {})
            usage = self._usage_registry.get(cache_path, {})
            
            # Create cache info
            cache_info = {
                'id': info.get('document_id', filename),
                'path': cache_path,
                'filename': filename,
                'size': stat.st_size,
                'last_modified': stat.st_mtime,
                'document_id': info.get('document_id', os.path.splitext(filename)[0]),
                'original_file_path': info.get('original_file_path', ''),
                'context_size': info.get('context_size', 0),
                'token_count': info.get('token_count', 0),
                'model_id': info.get('model_id', ''),
                'created_at': info.get('created_at', None),
                'last_used': usage.get('last_used', None),
                'usage_count': usage.get('usage_count', 0),
                'is_master': info.get('is_master', False)
            }
            
            return cache_info
        except Exception as e:
            print(f"Error getting info for {cache_path}: {e}")
            return None
    
    def register_cache(self, document_id: str, cache_path: str, context_size: int,
                       token_count: int = 0, original_file_path: str = "", model_id: str = "", 
                       is_master: bool = False) -> bool:
        """Register a KV cache in the registry"""
        if not cache_path or not os.path.exists(cache_path):
            print(f"Cannot register non-existent cache: {cache_path}")
            return False
        
        self._cache_registry[cache_path] = {
            'document_id': document_id,
            'original_file_path': original_file_path,
            'context_size': context_size,
            'token_count': token_count,
            'model_id': model_id,
            'created_at': time.time(),
            'is_master': is_master
        }
        
        if cache_path not in self._usage_registry:
            self._usage_registry[cache_path] = {'last_used': None, 'usage_count': 0}
        
        # Save changes
        self._save_json(self.registry_path, self._cache_registry)
        self._save_json(self.usage_path, self._usage_registry)
        
        # Notify UI
        self.cache_list_updated.emit()
        return True
    
    def update_usage_by_path(self, cache_path: str) -> bool:
        """Update usage statistics for a KV cache"""
        if not cache_path or not os.path.exists(cache_path):
            return False
        
        if cache_path not in self._cache_registry:
            return False
        
        # Update usage
        usage = self._usage_registry.get(cache_path, {'usage_count': 0})
        usage['last_used'] = time.time()
        usage['usage_count'] = usage.get('usage_count', 0) + 1
        self._usage_registry[cache_path] = usage
        
        # Save changes
        self._save_json(self.usage_path, self._usage_registry)
        
        # Notify UI
        self.cache_list_updated.emit()
        return True
    
    def purge_cache(self, cache_path: str) -> bool:
        """Purge a KV cache file and its registry entries"""
        if not cache_path:
            return False
        
        file_existed = os.path.exists(cache_path)
        
        # Try to delete the file
        if file_existed:
            try:
                os.remove(cache_path)
                print(f"Deleted cache file: {cache_path}")
            except Exception as e:
                print(f"Failed to delete {cache_path}: {e}")
                return False
        
        # Remove from registries
        if cache_path in self._cache_registry:
            del self._cache_registry[cache_path]
        if cache_path in self._usage_registry:
            del self._usage_registry[cache_path]
        
        # Save changes
        self._save_json(self.registry_path, self._cache_registry)
        self._save_json(self.usage_path, self._usage_registry)
        
        # Notify UI
        self.cache_purged.emit(cache_path, True)
        self.cache_list_updated.emit()
        return True
    
    def purge_all_caches(self) -> bool:
        """Purge all KV cache files and clear registries"""
        success = True
        
        # Delete each file
        for path in list(self._cache_registry.keys()):
            if os.path.exists(path):
                try:
                    os.remove(path)
                    print(f"Deleted cache file: {path}")
                except Exception as e:
                    print(f"Failed to delete {path}: {e}")
                    success = False
        
        # Clear registries
        self._cache_registry = {}
        self._usage_registry = {}
        
        # Save empty registries
        self._save_json(self.registry_path, self._cache_registry)
        self._save_json(self.usage_path, self._usage_registry)
        
        # Notify UI
        self.cache_list_updated.emit()
        return success
    
    def get_total_cache_size(self) -> int:
        """Get the total size of all registered KV caches in bytes"""
        total_size = 0
        
        for path in self._cache_registry.keys():
            if os.path.exists(path):
                try:
                    total_size += os.path.getsize(path)
                except Exception as e:
                    print(f"Failed to get size of {path}: {e}")
        
        return total_size
    
    def check_cache_compatibility(self, model_context_size: int) -> List[str]:
        """Check which caches might be incompatible with the given model context size"""
        incompatible = []
        
        for path, info in self._cache_registry.items():
            if os.path.exists(path):
                cache_context = info.get('context_size', 0)
                if cache_context > model_context_size:
                    incompatible.append(path)
        
        return incompatible
    
    def update_config(self, config):
        """Update configuration and reload registries if path changed"""
        old_dir = self.kv_cache_dir
        
        # Get new cache directory
        cache_dir = config.get('LLAMACPP_KV_CACHE_DIR', '')
        if not cache_dir:
            cache_dir = os.path.join(os.path.expanduser('~'), 'cag_project', 'kv_caches')
        new_dir = os.path.expanduser(cache_dir)
        
        # Update config
        self.config = config
        
        # Check if directory changed
        if new_dir != old_dir:
            print(f"KV cache directory changed: {old_dir} -> {new_dir}")
            self.kv_cache_dir = new_dir
            
            # Create directory if needed
            if not os.path.exists(self.kv_cache_dir):
                os.makedirs(self.kv_cache_dir, exist_ok=True)
            
            # Update registry paths
            self.registry_path = os.path.join(self.kv_cache_dir, 'cache_registry.json')
            self.usage_path = os.path.join(self.kv_cache_dir, 'usage_registry.json')
            
            # Reload registries
            self._cache_registry = self._load_json(self.registry_path, {})
            self._usage_registry = self._load_json(self.usage_path, {})
            
            # Notify UI
            self.cache_list_updated.emit()
